 #include <obliv.oh>
 #include "hw.h"


void revealOblivString(char *dest, obliv char const *src)
  {
  	bool within = true;

  	for (int i = 0; i < MAXL && within; i++)
  	{
  		bool withinWord;
  		revealOblivBool(&withinWord,src[i] != '\0',0);
  		withinWord = within;

  		if(withinWord)
  		{
  			revealOblivChar(&dest[i], src[i],0);
  		}
  	}
}

bool oblivStrCmp(obliv char const *str1, obliv char* const str2)
{
	obliv bool res=true;
	bool within=true;

	bool ret;
	
	for(int i=0; i<MAXL && within; i++)
	{
		bool withinWord1;
		bool withinWord2;
		obliv bool b1 =(str1[i] != '\0');
		obliv bool b2 =(str2[i] != '\0');


		
		revealOblivBool(&withinWord1,b1,0);
		revealOblivBool(&withinWord2,b2,0);

		if(withinWord1 && withinWord2)
		{
			obliv if(str1[i] != str2[i])
			{
				res = false;
			}
		}
		else if (withinWord1 != withinWord2)
			res= false;

		bool eq;
		revealOblivBool(&eq, res, 0);

		if(!eq)
			within = false;
	}
	
	revealOblivBool(&ret,res,0);
	return ret;
}

/*obliv bool oblivStrCmp(obliv char const *str1, obliv char* const str2)
{
	obliv bool res=true;
	bool within=true;

	
	for(int i=0; i<MAXL && within; i++)
	{
		bool withinWord1;
		bool withinWord2;
		obliv bool b1 =(str1[i] != '\0');
		obliv bool b2 =(str2[i] != '\0');


		
		revealOblivBool(&withinWord1,b1,0);
		revealOblivBool(&withinWord2,b2,0);

		if(withinWord1 && withinWord2)
		{
			obliv if(str1[i] != str2[i])
			{
				res = false;
			}
		}
		else if (withinWord1 != withinWord2)
			res= false;

		bool eq;
		revealOblivBool(&eq, res, 0);

		if(!eq)
			within = false;
	}
	
	return res;
	
}*/


void oblivStringCopy (obliv char * dest, char const *src, int party)
{
	for (int j = 0; j < MAXL; j++)
	{
		dest[j]= feedOblivChar(src[j],party);
		//if(src[j] == '\0')
		//	break;
	}
}


